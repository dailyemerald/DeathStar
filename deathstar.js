// Generated by CoffeeScript 1.3.3
(function() {
  var app, credentials, express, fs, http, instagram, io, pushNewItem, request, server;

  express = require('express');

  http = require('http');

  fs = require('fs');

  request = require('request');

  credentials = require('./credentials');

  instagram = require('./instagram');

  instagram.setCredentials(credentials.instagram);

  app = express.createServer();

  server = app.listen(11000);

  io = require('socket.io').listen(server);

  io.set('log level', 1);

  app.configure(function() {
    app.set('views', __dirname + '/views');
    app.set('view engine', 'jade');
    app.use(express.logger("dev"));
    app.use(express["static"](__dirname + "/public"));
    app.use(express.bodyParser());
    app.use(express.cookieParser());
    app.use(express.methodOverride());
    return app.use(express.errorHandler({
      showStack: true,
      dumpExceptions: true
    }));
  });

  pushNewItem = function(item) {
    return console.log('> Dummy: push', item, 'to all the websocket clients.');
  };

  /*
    ROUTES
  */


  app.get('/', function(req, res) {
    return res.send("This is not the webpage you are looking for.");
  });

  app.all('/notify/:id', function(req, res) {
    var notification, notifications, _i, _len, _results;
    if (req.query && req.query['hub.mode'] === 'subscribe') {
      console.log('+ Confirming new Instagram real-time subscription...');
      res.send(req.query['hub.challenge']);
      return;
    }
    notifications = req.body;
    console.log('* Notification for', req.params.id, '. Had', notifications.length, 'item(s).');
    _results = [];
    for (_i = 0, _len = notifications.length; _i < _len; _i++) {
      notification = notifications[_i];
      _results.push(getMedia(notification.object_id, function(err, data) {
        return pushNewItem({
          'type': 'instagram',
          'data': data
        });
      }));
    }
    return _results;
  });

  app.get('/delete/:subscriptionID', function(req, res) {
    var requestObj;
    console.log('! Got delete request for', req.params.subscriptionID);
    requestObj = {
      url: instagram.getDeleteURL,
      method: 'DELETE'
    };
    return request(requestObj, function(error, response, body) {
      body = JSON.parse(body);
      if (body.meta.code === 200) {
        return res.send(body);
      } else {
        return res.send(body);
      }
    });
  });

  app.get('/listInstagram', function(req, res) {
    return instagram.listSubscriptions(function(subscriptions) {
      return console.log(JSON.stringify(subscriptions));
    });
  });

  app.get('/build_instagram_geo', function(req, res) {
    var buildObj;
    buildObj = {
      lat: '44.058263',
      lng: '-123.068483',
      radius: '4000',
      streamID: 'uo_geo'
    };
    return instagram.buildGeographySubscription(buildObj, function(err, data) {
      if (err != null) {
        return res.send('err', err);
      } else {
        return res.send('yay', data);
      }
    });
  });

  app.get('/build_instagram_tag', function(req, res) {
    var buildObj;
    buildObj = {
      tag: 'love',
      streamID: 'love_tag'
    };
    return instagram.buildTagSubscription(buildObj, function(err, data) {
      if (err != null) {
        return res.send('err<br><br>' + err);
      } else {
        return res.send('yay<br><br>' + data);
      }
    });
  });

  io.sockets.on('connection', function(socket) {
    return console.log('socket connection');
  });

}).call(this);
