// Generated by CoffeeScript 1.3.3
(function() {
  var request;

  request = require('request');

  exports.setCredentials = function(credentials) {
    return exports.credentials = credentials;
  };

  exports.getAuthURL = function() {
    return "https://api.instagram.com/oauth/authorize/?client_id=" + exports.credentials.client_id + "&redirect_uri=" + exports.credentials.callback_uri + "&response_type=code";
  };

  exports.getDeleteURL = function(subscriptionID) {
    return "https://api.instagram.com/v1/subscriptions?client_secret=" + exports.credentials.client_secret + "&id=" + subscriptionID + "&client_id=" + exports.credentials.client_id;
  };

  exports.getSubscriptionListURL = function() {
    return "https://api.instagram.com/v1/subscriptions?client_secret=" + exports.credentials.client_secret + "&client_id=" + exports.credentials.client_id;
  };

  exports.getGeographyMediaRequest = function(geographyID) {
    return "https://api.instagram.com/v1/geographies/" + geographyID + "/media/recent?client_id=" + exports.credentials.client_id;
  };

  exports.getTagMediaRequest = function(tagName) {
    return "https://api.instagram.com/v1/tags/" + tagName + "/media/recent?client_id=" + exports.credentials.client_id;
  };

  exports.listSubscriptions = function(callback) {
    var requestObj;
    requestObj = {
      url: "https://api.instagram.com/v1/subscriptions?client_secret=" + exports.credentials.client_secret + "&client_id=" + exports.credentials.client_id
    };
    return request(requestObj, function(error, response, body) {
      return callback(JSON.parse(body));
    });
  };

  exports.buildGeographySubscription = function(builder, subscriptionCallback) {
    var requestObj;
    requestObj = {
      method: 'POST',
      url: 'https://api.instagram.com/v1/subscriptions/',
      form: {
        'client_id': exports.credentials.client_id,
        'client_secret': exports.credentials.client_secret,
        'object': 'geography',
        'aspect': 'media',
        'lat': builder.lat,
        'lng': builder.lng,
        'radius': builder.radius,
        'callback_url': exports.credentials.callback_url + '/notify/' + builder.streamID
      }
    };
    console.log(requestObj);
    return request(requestObj, function(error, response, body) {
      if (error === null) {
        return subscriptionCallback(null, '+ buildGeographySubscription');
      } else {
        return subscriptionCallback('- error with buildSubscription!', null);
      }
    });
  };

  exports.buildTagSubscription = function(builder, subscriptionCallback) {
    var requestObj;
    requestObj = {
      method: 'POST',
      url: 'https://api.instagram.com/v1/subscriptions/',
      form: {
        'client_id': exports.credentials.client_id,
        'client_secret': exports.credentials.client_secret,
        'object': 'tag',
        'aspect': 'media',
        'object_id': builder.tag,
        'callback_url': exports.credentials.callback_url + "/notify/" + builder.streamID
      }
    };
    return request(requestObj, function(error, response, body) {
      if (error === null) {
        return subscriptionCallback(null, '+ buildTagSubscription');
      } else {
        return subscriptionCallback('- error with buildTagSubscription', null);
      }
    });
  };

  exports.getTagMedia = function(tagName, callback) {
    var requestObj;
    requestObj = {
      url: exports.getTagMediaRequest(tagName)
    };
    return request(requestObj, function(error, response, body) {
      var lastObject, objects;
      if (!error && response.statusCode === 200) {
        try {
          body = JSON.parse(body);
          objects = body.data;
          lastObject = objects.pop();
          return callback(null, lastObject);
        } catch (error) {
          return callback(error, null);
        }
      } else {
        body = JSON.parse(body);
        return callback(body, null);
      }
    });
  };

  exports.getGeoMedia = function(geographyID, callback) {
    var requestObj;
    requestObj = {
      url: exports.getGeographyMediaRequest(geographyID)
    };
    return request(requestObj, function(error, response, body) {
      var lastObject, objects;
      try {
        if (!error && response.statusCode === 200) {
          body = JSON.parse(body);
          objects = body.data;
          lastObject = objects.pop;
          return callback(null, lastObject);
        } else {
          return callback(body, null);
        }
      } catch (error) {
        return callback(error, null);
      }
    });
  };

}).call(this);
